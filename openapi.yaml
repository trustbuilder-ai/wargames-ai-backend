openapi: 3.1.0
info:
  title: Backend API with Supabase Auth
  version: 1.0.0
  description: Backend API with Supabase Authentication
paths:
  /tournaments:
    get:
      summary: List Tournaments
      description: List tournaments with filtering
      operationId: list_tournaments_tournaments_get
      parameters:
      - name: selection_filter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SelectionFilter'
          default: ACTIVE
      - name: page_index
        in: query
        required: false
        schema:
          type: integer
          default: 0
          title: Page Index
      - name: count
        in: query
        required: false
        schema:
          type: integer
          default: 10
          title: Count
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournaments'
                title: Response List Tournaments Tournaments Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /tournaments/{tournament_id}:
    get:
      summary: Get Tournament
      description: Get a specific tournament
      operationId: get_tournament_tournaments__tournament_id__get
      security:
      - HTTPBearer: []
      parameters:
      - name: tournament_id
        in: path
        required: true
        schema:
          type: integer
          title: Tournament Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournaments'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /badges:
    get:
      summary: List Badges
      description: List badges, optionally filtered to user's badges only
      operationId: list_badges_badges_get
      security:
      - HTTPBearer: []
      parameters:
      - name: user_badges_only
        in: query
        required: false
        schema:
          type: boolean
          default: false
          title: User Badges Only
      - name: page_index
        in: query
        required: false
        schema:
          type: integer
          default: 0
          title: Page Index
      - name: count
        in: query
        required: false
        schema:
          type: integer
          default: 10
          title: Count
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badges'
                title: Response List Badges Badges Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /badges/{badge_id}:
    get:
      summary: Get Badge
      description: Get a specific badge
      operationId: get_badge_badges__badge_id__get
      security:
      - HTTPBearer: []
      parameters:
      - name: badge_id
        in: path
        required: true
        schema:
          type: integer
          title: Badge Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badges'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /challenges:
    get:
      summary: List Challenges
      description: List challenges with filtering
      operationId: list_challenges_challenges_get
      security:
      - HTTPBearer: []
      parameters:
      - name: tournament_id
        in: query
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          title: Tournament Id
      - name: page_index
        in: query
        required: false
        schema:
          type: integer
          default: 0
          title: Page Index
      - name: count
        in: query
        required: false
        schema:
          type: integer
          default: 10
          title: Count
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenges'
                title: Response List Challenges Challenges Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /challenges/{challenge_id}/start:
    post:
      summary: Start Challenge
      description: Start a challenge for the current user
      operationId: start_challenge_challenges__challenge_id__start_post
      security:
      - HTTPBearer: []
      parameters:
      - name: challenge_id
        in: path
        required: true
        schema:
          type: integer
          title: Challenge Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChallengeContexts'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /challenges/{challenge_id}/submit_message:
    post:
      summary: Submit Message To Challenge
      description: Submit a message to the challenge agent
      operationId: submit_message_to_challenge_challenges__challenge_id__submit_message_post
      security:
      - HTTPBearer: []
      parameters:
      - name: challenge_id
        in: path
        required: true
        schema:
          type: integer
          title: Challenge Id
      - name: message
        in: query
        required: true
        schema:
          type: string
          title: Message
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/UserChallengeContexts'
                - type: 'null'
                title: Response Submit Message To Challenge Challenges  Challenge
                  Id  Submit Message Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /tournaments/{tournament_id}/join:
    post:
      summary: Join Tournament
      description: Join a tournament
      operationId: join_tournament_tournaments__tournament_id__join_post
      security:
      - HTTPBearer: []
      parameters:
      - name: tournament_id
        in: path
        required: true
        schema:
          type: integer
          title: Tournament Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /users/me:
    get:
      summary: Get Current User Info
      description: Get current user information
      operationId: get_current_user_info_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
      security:
      - HTTPBearer: []
  /challenges/{challenge_id}/context:
    get:
      summary: Get Challenge Context
      description: Get challenge context for current user
      operationId: get_challenge_context_challenges__challenge_id__context_get
      security:
      - HTTPBearer: []
      parameters:
      - name: challenge_id
        in: path
        required: true
        schema:
          type: integer
          title: Challenge Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeContextResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /llm/chat/completions:
    post:
      summary: Create Chat Completion
      description: 'Create a chat completion using direct LiteLLM integration.


        This endpoint uses LiteLLM library to make direct calls to LLM providers

        without requiring a separate proxy server.'
      operationId: create_chat_completion_llm_chat_completions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
      - HTTPBearer: []
  /llm/models:
    get:
      summary: List Available Models
      description: 'List available LLM models.


        Returns a list of all models that have their API keys configured

        and are ready to use.'
      operationId: list_available_models_llm_models_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsResponse'
      security:
      - HTTPBearer: []
  /llm/health:
    get:
      summary: Check Llm Health
      description: 'Check the health status of the LLM service.


        Returns health information including available models and missing API keys.'
      operationId: check_llm_health_llm_health_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMHealthStatus'
      security:
      - HTTPBearer: []
  /:
    get:
      summary: Root
      description: Root endpoint - API information
      operationId: root__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /health_check:
    get:
      summary: Health Check
      description: Health check endpoint
      operationId: health_check_health_check_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
components:
  schemas:
    Badges:
      properties:
        id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Id
        challenge_id:
          type: integer
          title: Challenge Id
      type: object
      required:
      - challenge_id
      title: Badges
    ChallengeContextResponse:
      properties:
        user_challenge_context:
          $ref: '#/components/schemas/UserChallengeContexts'
        messages:
          items:
            $ref: '#/components/schemas/Message'
          type: array
          title: Messages
          default: []
      type: object
      required:
      - user_challenge_context
      title: ChallengeContextResponse
    Challenges:
      properties:
        id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Id
        name:
          type: string
          title: Name
        tournament_id:
          type: integer
          title: Tournament Id
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        tools_available:
          anyOf:
          - type: string
          - type: 'null'
          title: Tools Available
        tool_calls_success_criteria:
          anyOf:
          - type: string
          - type: 'null'
          title: Tool Calls Success Criteria
      type: object
      required:
      - name
      - tournament_id
      title: Challenges
    ChatChoice:
      properties:
        index:
          type: integer
          title: Index
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          anyOf:
          - type: string
          - type: 'null'
          title: Finish Reason
      type: object
      required:
      - index
      - message
      - finish_reason
      title: ChatChoice
      description: "A single choice in the chat completion response.\n\nAttributes:\n\
        \    index: The index of this choice.\n    message: The message generated\
        \ by the model.\n    finish_reason: The reason the model stopped generating."
    ChatMessage:
      properties:
        role:
          type: string
          enum:
          - user
          - assistant
          - system
          title: Role
        content:
          type: string
          title: Content
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      type: object
      required:
      - role
      - content
      title: ChatMessage
      description: "A single chat message in the conversation.\n\nAttributes:\n  \
        \  role: The role of the message sender (user, assistant, system).\n    content:\
        \ The content of the message.\n    name: Optional name of the message sender."
    ChatRequest:
      properties:
        model:
          type: string
          title: Model
        messages:
          items:
            $ref: '#/components/schemas/ChatMessage'
          type: array
          title: Messages
        temperature:
          anyOf:
          - type: number
            maximum: 2.0
            minimum: 0.0
          - type: 'null'
          title: Temperature
          default: 0.7
        max_tokens:
          anyOf:
          - type: integer
            maximum: 8192.0
            minimum: 1.0
          - type: 'null'
          title: Max Tokens
          default: 4096
        stream:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Stream
          default: false
        user:
          anyOf:
          - type: string
          - type: 'null'
          title: User
      type: object
      required:
      - model
      - messages
      title: ChatRequest
      description: "Request model for chat completions.\n\nAttributes:\n    model:\
        \ The model to use for completion.\n    messages: List of messages in the\
        \ conversation.\n    temperature: Sampling temperature (0.0 to 2.0).\n   \
        \ max_tokens: Maximum tokens in the response.\n    stream: Whether to stream\
        \ the response.\n    user: Optional user identifier for tracking."
    ChatResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/ChatChoice'
          type: array
          title: Choices
        usage:
          anyOf:
          - $ref: '#/components/schemas/ChatUsage'
          - type: 'null'
      type: object
      required:
      - id
      - object
      - created
      - model
      - choices
      title: ChatResponse
      description: "Response model for chat completions.\n\nAttributes:\n    id: Unique\
        \ identifier for the completion.\n    object: The object type (always \"chat.completion\"\
        ).\n    created: Unix timestamp of when the completion was created.\n    model:\
        \ The model used for the completion.\n    choices: List of completion choices.\n\
        \    usage: Token usage information."
    ChatUsage:
      properties:
        prompt_tokens:
          type: integer
          title: Prompt Tokens
        completion_tokens:
          type: integer
          title: Completion Tokens
        total_tokens:
          type: integer
          title: Total Tokens
      type: object
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      title: ChatUsage
      description: "Token usage information for the chat completion.\n\nAttributes:\n\
        \    prompt_tokens: Number of tokens in the prompt.\n    completion_tokens:\
        \ Number of tokens in the completion.\n    total_tokens: Total number of tokens\
        \ used."
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    LLMHealthStatus:
      properties:
        status:
          type: string
          enum:
          - healthy
          - unhealthy
          - degraded
          title: Status
        available_models:
          type: integer
          title: Available Models
        missing_keys:
          items:
            type: string
          type: array
          title: Missing Keys
        message:
          type: string
          title: Message
        details:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Details
      type: object
      required:
      - status
      - available_models
      - missing_keys
      - message
      title: LLMHealthStatus
      description: "Health status response for LLM service.\n\nAttributes:\n    status:\
        \ Health status (healthy, unhealthy, degraded).\n    available_models: Number\
        \ of models with valid API keys.\n    missing_keys: List of missing API key\
        \ environment variables.\n    message: Human-readable status message.\n  \
        \  details: Additional status details."
    Message:
      properties:
        role:
          type: string
          title: Role
        content:
          type: string
          title: Content
        is_tool_call:
          type: boolean
          title: Is Tool Call
          default: false
        tool_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Tool Name
      type: object
      required:
      - role
      - content
      title: Message
    ModelInfo:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: model
        created:
          type: integer
          title: Created
        owned_by:
          type: string
          title: Owned By
        display_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Display Name
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        max_tokens:
          anyOf:
          - type: integer
          - type: 'null'
          title: Max Tokens
      type: object
      required:
      - id
      - created
      - owned_by
      title: ModelInfo
      description: "Information about an available model.\n\nAttributes:\n    id:\
        \ The model identifier.\n    object: The object type (always \"model\").\n\
        \    created: Unix timestamp of when the model was created.\n    owned_by:\
        \ The organization that owns the model.\n    display_name: Human-readable\
        \ name for UI display.\n    description: Model description.\n    max_tokens:\
        \ Maximum tokens supported."
    ModelsResponse:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/ModelInfo'
          type: array
          title: Data
      type: object
      required:
      - data
      title: ModelsResponse
      description: "Response model for listing available models.\n\nAttributes:\n\
        \    object: The object type (always \"list\").\n    data: List of available\
        \ models."
    SelectionFilter:
      type: string
      enum:
      - PAST
      - ACTIVE
      - FUTURE
      - PAST_AND_ACTIVE
      - ACTIVE_AND_FUTURE
      title: SelectionFilter
    Tournaments:
      properties:
        id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Id
        name:
          type: string
          title: Name
        start_date:
          type: string
          format: date-time
          title: Start Date
        end_date:
          type: string
          format: date-time
          title: End Date
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
      type: object
      required:
      - name
      - start_date
      - end_date
      title: Tournaments
    UserChallengeContexts:
      properties:
        id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Id
        can_contribute:
          type: boolean
          title: Can Contribute
        challenge_id:
          type: integer
          title: Challenge Id
        started_at:
          type: string
          format: date-time
          title: Started At
        user_id:
          type: integer
          title: User Id
        succeeded_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Succeeded At
        failed_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Failed At
      type: object
      required:
      - can_contribute
      - challenge_id
      - started_at
      - user_id
      title: UserChallengeContexts
    UserInfo:
      properties:
        user_id:
          type: integer
          title: User Id
        email:
          anyOf:
          - type: string
          - type: 'null'
          title: Email
        active_tournaments:
          items:
            $ref: '#/components/schemas/Tournaments'
          type: array
          title: Active Tournaments
        active_challenges:
          items:
            $ref: '#/components/schemas/Challenges'
          type: array
          title: Active Challenges
        badges:
          items:
            $ref: '#/components/schemas/Badges'
          type: array
          title: Badges
      type: object
      required:
      - user_id
      - active_tournaments
      - active_challenges
      - badges
      title: UserInfo
      description: 'Represents a user''s information including active tournaments,
        challenges,

        and badges.'
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
